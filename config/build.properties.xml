<?xml version="1.0"?>
<!--
   ANT Buildfile - Builds the Arduino for Arduino
   Copyright (C) 2009 Christopher Ladden, Omar Ayub  All rights reserved.

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this library; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
   USA
-->
<project name="build.properties" basedir="." default="...">

    <property name="distribution.version"    value="0.1.0"/>

    <!--
        ===================================================================
         Set the properties related to the Sketch we're compiling.
            Some of these properties (and others) are designed
            to be assigned by an IDE before loading this file.
        ===================================================================
    -->
    <property name="sketch.name"    value="mysketch"/>
    <property name="sketch.maxsize" value="14336"/>
    <property name="target.name"    value="body"/>

    <property name="build.dest"     value="${user.home}/Sketchbook/${sketch.name}"/>
    <property name="tmp.path"       value="${build.dest}/tmp"/>
    <tstamp>
        <format property="sketch.build.time" pattern="HHmmss" timezone="GMT" />
        <format property="sketch.build.date" pattern="yyyyMMdd" timezone="GMT" />
    </tstamp>

    <!--
        ===================================================================
         Set the properties related to the Board
        ===================================================================
    -->
    <property name="board.name"      value="Arduino"/>
    <property name="board.arch"      value="Atmel"/>
    <property name="board.cpu"       value="atmega168"/>

    <!--
        ===================================================================
         Set the properties related to the uploader
        ===================================================================
    -->
    <property name="upload.avrdude"      value="${basedir}/../../../tools/avr/bin/avrdude"/>
    <property name="upload.avrdude.conf" value="${base.dir}/../../../tools/avr/etc/avrdude.conf"/>
    <property name="upload.avrdude.cpu"  value="m168"/>
    <property name="upload.avrdude.baud" value="19200"/>
    <property name="upload.avrdude.protocol" value="stk500"/>
    <property name="upload.port"         value="//./COM16"/>
    <property name="upload.sfbdl"        value="${basedir}/../../../uploaders/bin/sfbdl"/>

    <!--
        ===================================================================
         Set the properties related to the Compilers
        ===================================================================
    -->

    <!-- OS specific properties -->
    <if>
        <os family="windows" />
        <then>
            <!--- Windows family properties here -->
            <property name="native.base"    value="${basedir}/../../../tools/gcc"/>
            <property name="native.OS"      value="WIN32"/>
        </then>

    <elseif>
        <os family="unix" />
        <then>
            <!--- Unix family properties here -->
            <property name="native.base"     value="/usr"/>
            <property name="native.OS"       value="POSIX"/>
        </then>
    </elseif>
    </if>

    <if>
        <os family="mac"/>
        <then>
            <!--- Mac specific (not linux) properties here -->
            <property name="native.cflags"      value="${common.cppflags} ${native.gcc.defines} -arch i386"/>
            <property name="native.cppflags"    value="${common.cppflags} ${native.gcc.defines} -arch i386"/>
        </then>
    </if>

    <!-- GCC Executables -->
    <property name="native.gcc"      value="${native.base}/bin/gcc"/>
    <property name="native.gpp"      value="${native.base}/bin/g++"/>
    <property name="native.ld"       value="${native.base}/bin/ld"/>
    <property name="native.objcopy"  value="${native.base}/bin/objcopy"/>
    <property name="native.ar"       value="${native.base}/bin/ar"/>
    <property name="native.size"     value="${native.base}/bin/size"/>
    <property name="native.ranlib"   value="${native.base}/bin/ranlib"/>

    <property name="native.cflags"      value="${common.cppflags} ${native.gcc.defines}"/>
    <property name="native.cppflags"    value="${common.cppflags} ${native.gcc.defines}"/>
    <property name="native.ldflags"     value="${common.ldflags}"/>
    <property name="native.opts"        value="-O0 ${native.gcc.debug}"/>

    <property name="native.Arch.Code"   value="20"/>
    <property name="native.gcc.defines" value="-DOS=${native.OS} -DHOST_MODE -DHOST_${native.OS}"/>
    <property name="native.gcc.debug"   value="-g3"/>

    <!-- Cross -->
    <property name="cross.base"     value="${basedir}/../../../tools/avr"/>
    <property name="cross.gcc"      value="${cross.base}/bin/avr-gcc"/>
    <property name="cross.gpp"      value="${cross.base}/bin/avr-g++"/>
    <property name="cross.ld"       value="${cross.base}/bin/avr-ld"/>
    <property name="cross.objcopy"  value="${cross.base}/bin/avr-objcopy"/>
    <property name="cross.ar"       value="${cross.base}/bin/avr-ar"/>
    <property name="cross.size"     value="${cross.base}/bin/avr-size"/>

    <property name="common.cflags"   value="-g -w -I&quot;${lib.path}/include&quot;"/>
    <property name="common.cppflags" value="-g -w -I&quot;${lib.path}/include&quot;"/>
    <property name="common.ldflags"  value="-Wl,--gc-sections"/>

    <property name="cross.gcc.defines" value="-DF_CPU=16000000"/>
    <property name="cross.cflags"    value="${common.cflags} -mmcu=${board.cpu} -ffunction-sections -fdata-sections ${cross.gcc.defines}"/>
    <property name="cross.cppflags"  value="${common.cppflags} -mmcu=${board.cpu} -ffunction-sections -fdata-sections ${cross.gcc.defines}"/>
    <property name="cross.ldflags"   value="${common.ldflags} -mmcu=${board.cpu}"/>

    <property name="cross.opts"      value="-Os"/>
    <property name="cross.Arch.Code" value="2"/>

</project>



